Java Algorithm Notes

-Insertion: grab element in the array and compare to other elements until it finds the correct place to insert it. Time complexity O(n pow(2))
-bubble sort: compare every two elements of the array an swap/sort lowest to largest. Then repeat. Time complexity quadratic O(n pow(2))
-Selection sort: compare one element with the rest of the elements. If any of the rest of the element is larger, swap. Then repeat. Time complexity quadratic O(n pow(2))
-Merge sort: divide the array into 2 multiple times until each array element is by itself. Then sort and merge elements.
-Quick Sort: Use a pivot element and divide the array based on the pivot value. Items lower than pivot go to left and
elements more than pivot go right
-Counting sort: make assumption about the data. go through the array and count how many values of each there are.
-Radix Sort: This algo makes assumption about the data being sorted.
-Java JDK: The JDK has an arrays class that contain sorting methods to sort arrays.
-Vector: only use vector when you need synchronization
-Arraylist: this is not synchronized
-Linked list: Each value has a reference of the next item in the list. first item in the lis the the head. No sinchronized
Linked list require more memory due to link attribute

-Stacks: abstract data, LIFO last in first out, push to add to top, pop to remove from top, peek see top item
time complexity is constant for the commands listed above. But the time complexity will be dependent on the implementation
stack function similar to linked list singly.

-Queues: Abstract data type, FIFO first in first out, add item end of queue, remove item from front.
JDK has a queue interface that can be used. JDK offers a couple of method such as add, remove, peek, etc...
array blocking queue is a type of queue that has a limit that cannot be changed.

Hashtable: abstract data type, consist of key value pairs, maps, keys.
use linear probing to check if value key pair is already in the hashtable to avoid collisions.

